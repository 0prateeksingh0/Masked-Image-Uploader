{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\prate\\\\Downloads\\\\Assignment\\\\masked-image-uploader\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef } from 'react';\nimport './App.css';\nimport CanvasDraw from 'react-canvas-draw';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [imageSrc, setImageSrc] = useState(null);\n  const [brushSize, setBrushSize] = useState(5);\n  const canvasRef = useRef(null);\n\n  // Handle image upload\n  const handleImageChange = e => {\n    const file = e.target.files[0];\n    const reader = new FileReader();\n    reader.onloadend = () => {\n      setImageSrc(reader.result);\n    };\n    if (file) {\n      reader.readAsDataURL(file);\n    }\n  };\n\n  // Export the mask image\n  const handleExport = () => {\n    const maskDataUrl = canvasRef.current.getDataURL('image/png'); // Ensure the mask is exported in PNG format\n    const link = document.createElement('a');\n    link.href = maskDataUrl;\n    link.download = 'mask.png'; // Set the default download name\n    link.click(); // Trigger the download\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Image Inpainting Widget\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        accept: \"image/*\",\n        onChange: handleImageChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this), imageSrc && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(CanvasDraw, {\n          ref: canvasRef,\n          imgSrc: imageSrc,\n          brushColor: \"white\",\n          brushRadius: brushSize,\n          canvasWidth: 500 // Ensure the canvas is the right size\n          ,\n          canvasHeight: 500 // Ensure the canvas is the right size\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setBrushSize(brushSize + 1),\n            children: \"Increase Brush Size\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setBrushSize(brushSize - 1),\n            children: \"Decrease Brush Size\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleExport,\n          children: \"Export Mask\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Original Image\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n            src: imageSrc,\n            alt: \"Original\",\n            width: \"300\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"kaT2SFJxC+L4Z/6HQp0r3Lq1pP8=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useRef","CanvasDraw","jsxDEV","_jsxDEV","App","_s","imageSrc","setImageSrc","brushSize","setBrushSize","canvasRef","handleImageChange","e","file","target","files","reader","FileReader","onloadend","result","readAsDataURL","handleExport","maskDataUrl","current","getDataURL","link","document","createElement","href","download","click","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","accept","onChange","ref","imgSrc","brushColor","brushRadius","canvasWidth","canvasHeight","onClick","src","alt","width","_c","$RefreshReg$"],"sources":["C:/Users/prate/Downloads/Assignment/masked-image-uploader/src/App.js"],"sourcesContent":["import React, { useState, useRef } from 'react';\nimport './App.css';\nimport CanvasDraw from 'react-canvas-draw';\n\nfunction App() {\n  const [imageSrc, setImageSrc] = useState(null);\n  const [brushSize, setBrushSize] = useState(5);\n  const canvasRef = useRef(null);\n\n  // Handle image upload\n  const handleImageChange = (e) => {\n    const file = e.target.files[0];\n    const reader = new FileReader();\n    reader.onloadend = () => {\n      setImageSrc(reader.result);\n    };\n    if (file) {\n      reader.readAsDataURL(file);\n    }\n  };\n\n  // Export the mask image\n  const handleExport = () => {\n    const maskDataUrl = canvasRef.current.getDataURL('image/png'); // Ensure the mask is exported in PNG format\n    const link = document.createElement('a');\n    link.href = maskDataUrl;\n    link.download = 'mask.png'; // Set the default download name\n    link.click(); // Trigger the download\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Image Inpainting Widget</h1>\n        \n        {/* Image Upload */}\n        <input type=\"file\" accept=\"image/*\" onChange={handleImageChange} />\n        \n        {imageSrc && (\n          <div>\n            {/* Canvas for drawing the mask */}\n            <CanvasDraw\n              ref={canvasRef}\n              imgSrc={imageSrc}\n              brushColor=\"white\"\n              brushRadius={brushSize}\n              canvasWidth={500} // Ensure the canvas is the right size\n              canvasHeight={500} // Ensure the canvas is the right size\n            />\n            <div>\n              <button onClick={() => setBrushSize(brushSize + 1)}>Increase Brush Size</button>\n              <button onClick={() => setBrushSize(brushSize - 1)}>Decrease Brush Size</button>\n            </div>\n            {/* Export Mask Button */}\n            <button onClick={handleExport}>Export Mask</button>\n\n            {/* Display the original image */}\n            <div>\n              <h3>Original Image</h3>\n              <img src={imageSrc} alt=\"Original\" width=\"300\" />\n            </div>\n          </div>\n        )}\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}